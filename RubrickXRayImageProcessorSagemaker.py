# %% AICamp Ruberick project - Chest Xray Image Classification --
#
#  Input dataset - https://www.kaggle.com/praveengovi/coronahack-chest-xraydataset
#  This Classification model is generated by AWS Sagemaker RESNET Image Classifier
#  It can classify Chest Xray as input image into the following classes
#
#
#  1. Normal: 0
#  2. PnemoniaStress-SmokingARDS: 1
#  3. PnemoniaVirus: 2
#  4. PnemoniaVirusCOVID-19: 3
#  5. PnemoniaVirusSARS: 4
#  6. Pnemoniabacteria: 5,
#  7. PnemoniabacteriaStreptococcus: 6
#
# The Kaggle supplied datasets include a set of files as follows:
#  1. Train images for 5286 Xray Images
#  2. Test images for 624 Xray Images
#  3. Chest Xray Corona datset Summary csv file
#  4. Chest Xray Corona Metadata csv file
#
# The code below creates the lst files for training and validation using the supplied Summary and Metadata files
# AWS Sagemaker RESNET based Image Classifier is trained using the Train and Test Images as well as the generated
# lst files.
#
#
#  #  Author : Pinaki R Basu


import pandas as pd
import numpy as np
import json
import os
import random
import matplotlib.pyplot as plt

# %% Read the metadata and dataset summary for Chest Xray datasets
##
train_df = pd.read_csv('./input/Coronahack-Chest-XRay-Dataset/Chest_xray_Corona_Metadata.csv')
valid_df = pd.read_csv('./input/Coronahack-Chest-XRay-Dataset/Chest_xray_Corona_dataset_Summary.csv')

print('The training dataset has rows : ', format(train_df.shape[0]))
print('The training dataset has cols : ', format(train_df.shape[1]))

print('The validate dataset has rows : ', format(valid_df.shape[0]))
print('The validate dataset has cols : ', format(valid_df.shape[1]))

print(valid_df.head(10))

train_data = train_df[train_df['Dataset_type'] == 'TRAIN']
test_data = train_df[train_df['Dataset_type'] == 'TEST']

assert train_data.shape[0] + test_data.shape[0] == train_df.shape[0]
print(f"Shape of train data : {train_data.shape}")
print(f"Shape of test data : {test_data.shape}")
print(test_data.sample(10))

# %% Create the category array from Corona Summary dataset

labelling = valid_df.loc[:, ['Label', 'Label_1_Virus_category', 'Label_2_Virus_category']]
print(labelling)
Xray_type = {}

# for row in labelling.index:
# iterate over the labelling dataframe

for ind in labelling.index:
    if str(labelling['Label_1_Virus_category'][ind]) == 'nan':
        Xray_type[str(labelling['Label'][ind])] = ind
        # print(ind, str(labelling['Label'][ind]))
    elif str(labelling['Label_2_Virus_category'][ind]) == 'nan':
        Xray_type[str(labelling['Label'][ind]) + str(labelling['Label_1_Virus_category'][ind])] = ind
        # print(ind, str(labelling['Label'][ind]) + str(labelling['Label_1_Virus_category'][ind]))
    else:
        Xray_type["{0}{1}{2}".format(str(labelling['Label'][ind]), str(labelling['Label_1_Virus_category'][ind]),
                                     str(labelling['Label_2_Virus_category'][ind]))] = ind
        # print(ind, "{0}{1}{2}".format(str(labelling['Label'][ind]), str(labelling['Label_1_Virus_category'][ind]),
        #                               str(labelling['Label_2_Virus_category'][ind])))

# Generate lst files given the folder containing sub-folders of images


print(Xray_type)

# %% ## create the dataframe for Training data

train_data_trim = train_data.loc[:, ['X_ray_image_name', 'Label', 'Label_1_Virus_category',
                                     'Label_2_Virus_category']]
print(f"Shape of train trim data : {train_data_trim.shape}")

print(train_data_trim.sample(10))

# %% ## create the datafarame for Validation data

test_data_trim = test_data.loc[:, ['X_ray_image_name', 'Label', 'Label_1_Virus_category',
                                   'Label_2_Virus_category']]
print(f"Shape of test trim data : {test_data_trim.shape}")
print(test_data_trim.sample(10))

# # Create a train and test lst file

f_train = open("output/train_lst.lst", "w")
f_test = open("output/validation_lst.lst", "w")



# %% ###      Create the Training lst file

# Create the Training lst file
label = 'train'
train_Xray_type = ''

for ind in train_data_trim.index:
    if str(train_data_trim['Label_1_Virus_category'][ind]) == 'nan':
        train_Xray_type = str(train_data_trim['Label'][ind])
    elif str(train_data_trim['Label_2_Virus_category'][ind]) == 'nan':
        train_Xray_type = str(train_data_trim['Label'][ind]) + str(train_data_trim['Label_1_Virus_category'][ind])
    else:
        train_Xray_type = str(
            "{0}{1}{2}".format(str(train_data_trim['Label'][ind]), str(train_data_trim['Label_1_Virus_category'][ind]),
                               str(train_data_trim['Label_2_Virus_category'][ind])))
    cat_type = str(Xray_type.get(train_Xray_type))
    image_name = str(train_data_trim['X_ray_image_name'][ind])
    # print(str(ind), train_Xray_type, cat_type, image_name)
    f_train.write(str(ind) + '\t' + cat_type + '\t' + label + '/' + image_name + '\n')


f_train.close()

# %%  Create the Validation lst file

label = 'test'
test_Xray_type = ''
for ind in test_data_trim.index:
    if str(test_data_trim['Label_1_Virus_category'][ind]) == 'nan':
        test_Xray_type = str(test_data_trim['Label'][ind])
    elif str(test_data_trim['Label_2_Virus_category'][ind]) == 'nan':
        test_Xray_type = str(test_data_trim['Label'][ind]) + str(test_data_trim['Label_1_Virus_category'][ind])
    else:
        test_Xray_type = str(
            "{0}{1}{2}".format(str(test_data_trim['Label'][ind]), str(test_data_trim['Label_1_Virus_category'][ind]),
                               str(test_data_trim['Label_2_Virus_category'][ind])))
    cat_type = str(Xray_type.get(test_Xray_type))
    image_name = str(test_data_trim['X_ray_image_name'][ind])
    # print(test_Xray_type, cat_type, image_name)
    f_test.write(str(ind) + '\t' + cat_type + '\t' + label + '/' + image_name + '\n')

f_test.close()




